// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Campaign entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Campaign must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Campaign", id.toString(), this);
    }
  }

  static load(id: string): Campaign | null {
    return changetype<Campaign | null>(store.get("Campaign", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get CampaignId(): BigInt {
    let value = this.get("CampaignId");
    return value!.toBigInt();
  }

  set CampaignId(value: BigInt) {
    this.set("CampaignId", Value.fromBigInt(value));
  }

  get InvestmentClaimed(): BigInt {
    let value = this.get("InvestmentClaimed");
    return value!.toBigInt();
  }

  set InvestmentClaimed(value: BigInt) {
    this.set("InvestmentClaimed", Value.fromBigInt(value));
  }

  get ClaimBackInvestment(): boolean {
    let value = this.get("ClaimBackInvestment");
    return value!.toBoolean();
  }

  set ClaimBackInvestment(value: boolean) {
    this.set("ClaimBackInvestment", Value.fromBoolean(value));
  }

  get CreatedAt(): BigInt {
    let value = this.get("CreatedAt");
    return value!.toBigInt();
  }

  set CreatedAt(value: BigInt) {
    this.set("CreatedAt", Value.fromBigInt(value));
  }

  get PreSaleToken(): Bytes {
    let value = this.get("PreSaleToken");
    return value!.toBytes();
  }

  set PreSaleToken(value: Bytes) {
    this.set("PreSaleToken", Value.fromBytes(value));
  }

  get PreSaleTokenBalance(): BigInt {
    let value = this.get("PreSaleTokenBalance");
    return value!.toBigInt();
  }

  set PreSaleTokenBalance(value: BigInt) {
    this.set("PreSaleTokenBalance", Value.fromBigInt(value));
  }

  get DepositedAmount(): BigInt {
    let value = this.get("DepositedAmount");
    return value!.toBigInt();
  }

  set DepositedAmount(value: BigInt) {
    this.set("DepositedAmount", Value.fromBigInt(value));
  }

  get CampaignOwner(): Bytes {
    let value = this.get("CampaignOwner");
    return value!.toBytes();
  }

  set CampaignOwner(value: Bytes) {
    this.set("CampaignOwner", Value.fromBytes(value));
  }

  get SecondOwner(): Bytes {
    let value = this.get("SecondOwner");
    return value!.toBytes();
  }

  set SecondOwner(value: Bytes) {
    this.set("SecondOwner", Value.fromBytes(value));
  }

  get RequiredInvestment(): BigInt {
    let value = this.get("RequiredInvestment");
    return value!.toBigInt();
  }

  set RequiredInvestment(value: BigInt) {
    this.set("RequiredInvestment", Value.fromBigInt(value));
  }

  get InvestedAmount(): BigInt {
    let value = this.get("InvestedAmount");
    return value!.toBigInt();
  }

  set InvestedAmount(value: BigInt) {
    this.set("InvestedAmount", Value.fromBigInt(value));
  }

  get ClaimableInvestment(): BigInt {
    let value = this.get("ClaimableInvestment");
    return value!.toBigInt();
  }

  set ClaimableInvestment(value: BigInt) {
    this.set("ClaimableInvestment", Value.fromBigInt(value));
  }

  get MarketingBudget(): BigInt {
    let value = this.get("MarketingBudget");
    return value!.toBigInt();
  }

  set MarketingBudget(value: BigInt) {
    this.set("MarketingBudget", Value.fromBigInt(value));
  }

  get StartTime(): BigInt {
    let value = this.get("StartTime");
    return value!.toBigInt();
  }

  set StartTime(value: BigInt) {
    this.set("StartTime", Value.fromBigInt(value));
  }

  get EndTime(): BigInt {
    let value = this.get("EndTime");
    return value!.toBigInt();
  }

  set EndTime(value: BigInt) {
    this.set("EndTime", Value.fromBigInt(value));
  }

  get RemainingInvestment(): BigInt {
    let value = this.get("RemainingInvestment");
    return value!.toBigInt();
  }

  set RemainingInvestment(value: BigInt) {
    this.set("RemainingInvestment", Value.fromBigInt(value));
  }

  get NumberOfPostsReq(): BigInt {
    let value = this.get("NumberOfPostsReq");
    return value!.toBigInt();
  }

  set NumberOfPostsReq(value: BigInt) {
    this.set("NumberOfPostsReq", Value.fromBigInt(value));
  }

  get StakingAmount(): BigInt {
    let value = this.get("StakingAmount");
    return value!.toBigInt();
  }

  set StakingAmount(value: BigInt) {
    this.set("StakingAmount", Value.fromBigInt(value));
  }

  get IsVestingInEnabled(): boolean {
    let value = this.get("IsVestingInEnabled");
    return value!.toBoolean();
  }

  set IsVestingInEnabled(value: boolean) {
    this.set("IsVestingInEnabled", Value.fromBoolean(value));
  }

  get NumberOfvestings(): BigInt {
    let value = this.get("NumberOfvestings");
    return value!.toBigInt();
  }

  set NumberOfvestings(value: BigInt) {
    this.set("NumberOfvestings", Value.fromBigInt(value));
  }

  get VestingCycleDuration(): BigInt {
    let value = this.get("VestingCycleDuration");
    return value!.toBigInt();
  }

  set VestingCycleDuration(value: BigInt) {
    this.set("VestingCycleDuration", Value.fromBigInt(value));
  }

  get VestingAmtPerCycle(): BigInt {
    let value = this.get("VestingAmtPerCycle");
    return value!.toBigInt();
  }

  set VestingAmtPerCycle(value: BigInt) {
    this.set("VestingAmtPerCycle", Value.fromBigInt(value));
  }

  get IsTGE(): boolean {
    let value = this.get("IsTGE");
    return value!.toBoolean();
  }

  set IsTGE(value: boolean) {
    this.set("IsTGE", Value.fromBoolean(value));
  }

  get TgePercentage(): BigInt {
    let value = this.get("TgePercentage");
    return value!.toBigInt();
  }

  set TgePercentage(value: BigInt) {
    this.set("TgePercentage", Value.fromBigInt(value));
  }

  get TgeTime(): BigInt {
    let value = this.get("TgeTime");
    return value!.toBigInt();
  }

  set TgeTime(value: BigInt) {
    this.set("TgeTime", Value.fromBigInt(value));
  }

  get TgeAmount(): BigInt {
    let value = this.get("TgeAmount");
    return value!.toBigInt();
  }

  set TgeAmount(value: BigInt) {
    this.set("TgeAmount", Value.fromBigInt(value));
  }

  get Kols(): string | null {
    let value = this.get("Kols");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Kols(value: string | null) {
    if (!value) {
      this.unset("Kols");
    } else {
      this.set("Kols", Value.fromString(<string>value));
    }
  }
}

export class Kol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Kol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Kol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Kol", id.toString(), this);
    }
  }

  static load(id: string): Kol | null {
    return changetype<Kol | null>(store.get("Kol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get KolId(): BigInt {
    let value = this.get("KolId");
    return value!.toBigInt();
  }

  set KolId(value: BigInt) {
    this.set("KolId", Value.fromBigInt(value));
  }

  get KolName(): string {
    let value = this.get("KolName");
    return value!.toString();
  }

  set KolName(value: string) {
    this.set("KolName", Value.fromString(value));
  }

  get Blacklisted(): boolean {
    let value = this.get("Blacklisted");
    return value!.toBoolean();
  }

  set Blacklisted(value: boolean) {
    this.set("Blacklisted", Value.fromBoolean(value));
  }

  get BlacklistedCampaigns(): Array<BigInt> | null {
    let value = this.get("BlacklistedCampaigns");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set BlacklistedCampaigns(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("BlacklistedCampaigns");
    } else {
      this.set(
        "BlacklistedCampaigns",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get KolWalletAddress(): Bytes {
    let value = this.get("KolWalletAddress");
    return value!.toBytes();
  }

  set KolWalletAddress(value: Bytes) {
    this.set("KolWalletAddress", Value.fromBytes(value));
  }

  get IpfsHash(): string {
    let value = this.get("IpfsHash");
    return value!.toString();
  }

  set IpfsHash(value: string) {
    this.set("IpfsHash", Value.fromString(value));
  }

  get TotalInvestedAmount(): BigInt {
    let value = this.get("TotalInvestedAmount");
    return value!.toBigInt();
  }

  set TotalInvestedAmount(value: BigInt) {
    this.set("TotalInvestedAmount", Value.fromBigInt(value));
  }

  get InvestedCampaigns(): Array<string> {
    let value = this.get("InvestedCampaigns");
    return value!.toStringArray();
  }

  set InvestedCampaigns(value: Array<string>) {
    this.set("InvestedCampaigns", Value.fromStringArray(value));
  }

  get KolInvestedInCampaign(): Array<string> {
    let value = this.get("KolInvestedInCampaign");
    return value!.toStringArray();
  }

  set KolInvestedInCampaign(value: Array<string>) {
    this.set("KolInvestedInCampaign", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get WalletAddress(): Bytes {
    let value = this.get("WalletAddress");
    return value!.toBytes();
  }

  set WalletAddress(value: Bytes) {
    this.set("WalletAddress", Value.fromBytes(value));
  }

  get Role(): string {
    let value = this.get("Role");
    return value!.toString();
  }

  set Role(value: string) {
    this.set("Role", Value.fromString(value));
  }

  get Name(): string | null {
    let value = this.get("Name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Name(value: string | null) {
    if (!value) {
      this.unset("Name");
    } else {
      this.set("Name", Value.fromString(<string>value));
    }
  }
}

export class KolInvestmentTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save KolInvestmentTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type KolInvestmentTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("KolInvestmentTransaction", id.toString(), this);
    }
  }

  static load(id: string): KolInvestmentTransaction | null {
    return changetype<KolInvestmentTransaction | null>(
      store.get("KolInvestmentTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get CampaignInvestedId(): BigInt {
    let value = this.get("CampaignInvestedId");
    return value!.toBigInt();
  }

  set CampaignInvestedId(value: BigInt) {
    this.set("CampaignInvestedId", Value.fromBigInt(value));
  }

  get TransactionTime(): BigInt {
    let value = this.get("TransactionTime");
    return value!.toBigInt();
  }

  set TransactionTime(value: BigInt) {
    this.set("TransactionTime", Value.fromBigInt(value));
  }

  get ClaimedPresaleTokensAmount(): BigInt {
    let value = this.get("ClaimedPresaleTokensAmount");
    return value!.toBigInt();
  }

  set ClaimedPresaleTokensAmount(value: BigInt) {
    this.set("ClaimedPresaleTokensAmount", Value.fromBigInt(value));
  }

  get ProjectOwner(): Bytes {
    let value = this.get("ProjectOwner");
    return value!.toBytes();
  }

  set ProjectOwner(value: Bytes) {
    this.set("ProjectOwner", Value.fromBytes(value));
  }

  get CampaignId(): string {
    let value = this.get("CampaignId");
    return value!.toString();
  }

  set CampaignId(value: string) {
    this.set("CampaignId", Value.fromString(value));
  }

  get lastClaimedProgress(): BigInt {
    let value = this.get("lastClaimedProgress");
    return value!.toBigInt();
  }

  set lastClaimedProgress(value: BigInt) {
    this.set("lastClaimedProgress", Value.fromBigInt(value));
  }

  get ClaimedBackInvestment(): boolean {
    let value = this.get("ClaimedBackInvestment");
    return value!.toBoolean();
  }

  set ClaimedBackInvestment(value: boolean) {
    this.set("ClaimedBackInvestment", Value.fromBoolean(value));
  }

  get Amount(): BigInt {
    let value = this.get("Amount");
    return value!.toBigInt();
  }

  set Amount(value: BigInt) {
    this.set("Amount", Value.fromBigInt(value));
  }

  get InvestmentShare(): BigInt {
    let value = this.get("InvestmentShare");
    return value!.toBigInt();
  }

  set InvestmentShare(value: BigInt) {
    this.set("InvestmentShare", Value.fromBigInt(value));
  }

  get KolAddress(): Bytes {
    let value = this.get("KolAddress");
    return value!.toBytes();
  }

  set KolAddress(value: Bytes) {
    this.set("KolAddress", Value.fromBytes(value));
  }

  get Kols(): string {
    let value = this.get("Kols");
    return value!.toString();
  }

  set Kols(value: string) {
    this.set("Kols", Value.fromString(value));
  }
}
